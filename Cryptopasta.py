# The MIT License (MIT)
# –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞? –Ω–µ —Å–ª—ã—à–∞–ª

# –ü–∞—Å—Ç–µ—Ä –±–ª—è) : Fxrlxrn
# scope: hikka_only

from .. import loader, utils
import logging
import asyncio

version = (1, 3, 2)
logger = logging.getLogger(name)

@loader.tds
class CryptoStealMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–æ–≤ (–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤)."""

    # –°—Ç—Ä–æ–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    strings = {
        "name": "CryptoSteal",
        "disabled": "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ",
        "enabled": "‚úÖ –í–∫–ª—é—á–µ–Ω–æ",
        "status_now": "ü§ë Crypto-Steal –±—ã–ª <b>{}</b>!",
        "config_status": "–ì–æ—Ç–æ–≤—ã –ª–∏ –º—ã —Ç—ã—Ä–∏—Ç—å?",
        "config_delay": (
            "–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —á–µ–∫–∞? (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª —á–µ–∫)"
        ),
        "config_allow_other_bots": "–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —è –±—É–¥—É –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç –î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ë–æ—Ç–æ–≤",
        "config_use_asset_chat": "–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —á–∞—Ç 'crypto-steal' –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
        "config_trusted_bots": "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ë–æ—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —è –±—É–¥—É –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ allow_other_bots —Ä–∞–≤–µ–Ω False (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)",
        "cant_create_asset_chat": "üò¢ –ß–∞—Ç Crypto-Steal –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ.",
        "asset_chat_got_check": (
            "‚òòÔ∏è –ù–∞–¥–µ—é—Å—å, –ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫!\nüîó –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ: {u1}?start={u2} –∏–ª–∏ <code>/start {u2}</code> –≤ {u1}"
            '\n\n<a href="{link}">üîó –°–æ–æ–±—â–µ–Ω–∏–µ</a>'
        ),
    }

    def __init__(self):
        # fmt: off
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "status",
                True,
                lambda: self.strings("config_status"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "delay",
                0.08,
                lambda: self.strings("config_delay"),
                validator=loader.validators.Float()
            ),
            loader.ConfigValue(
                "allow_other_bots",
                False,
                lambda: self.strings("config_allow_other_bots"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "use_asset_chat",
                True,
                lambda: self.strings("config_use_asset_chat"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "trusted_bots",
                ["cryptobot", "tonrocketbot", "xjetswapbot"],
                lambda: self.strings("trusted_bots"),
                validator=loader.validators.Series(
                    loader.validators.Union(loader.validators.String(), loader.validators.Integer())
                ),
            ),
        )
        # fmt: on

    async def client_ready(self):
        self.me = await self.client.get_me()

        self.asset_chat = await utils.asset_channel(
            self.client,
            "crypto-steal",
            "",
            avatar=r"https://img2.joyreactor.cc/pics/post/full/Zettai-Ryouiki-%D1%80%D0%B0%D0%B7%D0%BD%D0%BE%D0%B5-3527844.jpeg",
            silent=True,
            invite_bot=True,
        )

        if not self.asset_chat:
            await self.inline.bot.send_message(self._client.tg_id, self.strings("cant_create_asset_chat"))
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç Crypto-Steal")

    @loader.watcher(only_messages=True, only_inline=True)
    async def watcher(self, message):
        already_claimed: list = self.db.get(__name__, "already_claimed", [])

        if not self.config["status"]:
            return
        if not (("check for " in message.raw_text.lower()) or ("—á–µ–∫ –Ω–∞ " in message.raw_text.lower())):
            return

        url = message.buttons[0][0].url.split("?start=")

        if url[1] in already_claimed:
            logging.debug("–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return

        user = await self.client.get_entity(url[0])

        link = f"https://t.me/c/{str(message.chat_id).replace('-100', '')}/{message.id}"

        if (user.username.lower() not in self.config["trusted_bots"]) and (not self.config["allow_other_bots"]):
            return logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–µ–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–æ—Ç (@{user.username})")

        # https://t.me/c/1955174868/656
        await message.mark_read()

        await asyncio.sleep(self.config["delay"])

        await self.client.send_message(user.id, f"/start {url[1]}")
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞, –Ω–∞–¥–µ—é—Å—å, –º—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏")

        already_claimed.append(url[1])
        self.db.set(__name__, "already_claimed", already_claimed)

        if self.asset_chat and self.config["use_asset_chat"]:
            await self.inline.bot.send_message(
                f"-100{self.asset_chat[0].id}",
                self.strings("asset_chat_got_check").format(u1=url[0], u2=url[1], link=link),
                disable_web_page_preview=True,
            )

    async def cryptostealcmd(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å Crypto-Steal"""

        self.config["status"] = not self.config["status"]

        await utils.answer(
            message,
            self.strings("status_now").format(
                self.strings("enabled") if self.config["status"] else self.strings("disabled")
            ),
        )
